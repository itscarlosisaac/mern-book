{"version":3,"sources":["../server/server.js"],"names":["install","app","Error","db","connect","then","connection","listen","console","log","catch","error","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","req","res","collection","find","toArray","metadata","total_count","issues","length","_metadata","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next","newIssues"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport Issue from './Issue.js'\nimport { MongoClient } from 'mongodb';\nimport 'babel-polyfill'\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nconst app = express();\n\nthrow new Error(\"Test!\");\n\n// Mongo db\nlet db;\n\nMongoClient.connect('mongodb://localhost/issuetracker')\n           .then(connection => {\n               db = connection;\n               app.listen(3000, () => {\n                   console.log('App started on port 3000');\n               })\n           })\n           .catch(error => {\n               console.log('Connection error: ', error );\n           })\n\n\n// Static and body parser\napp.use(express.static('static'));\napp.use(bodyParser.json())\n\nif( process.env.NODE_ENV !== 'production'){\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin() );\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, {noInfo: true }));\n    app.use(webpackHotMiddleware(bundler, {log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray()\n      .then(issues => {\n          const metadata = { total_count: issues.length };\n          res.json({_metadata: metadata, records: issues })\n      })\n      .catch(error => {\n          console.log('ERROR: ', error )\n          res.status(500).json({message: `Internal Server Error: ${error}`} );\n      })\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    !newIssue.status ? newIssue.status = 'New' : null;\n\n    const err = Issue.validateIssue(newIssue);\n    if(err) {\n        res.status(422).json({ message: `Invalid request ${err}` });\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue)\n      .then(result => db.collection('issues').find({_id: result.insertedId }).limit(1).next() )\n      .then(newIssues =>  res.json(newIssues))\n      .catch( err => {\n          console.log(err)\n          res.status(500).json({message: `Internal server Error: ${err}` });\n      })\n    res.json(newIssue);\n});"]}